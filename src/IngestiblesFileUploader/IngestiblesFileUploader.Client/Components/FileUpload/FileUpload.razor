@rendermode InteractiveAuto

<div class="box has-advanced-upload @HoverClass" @ref="FileDropContainer" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter" @ondrop="OnFileDrop">
    <div class="box__input">
        <svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43">
            <path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z"></path>
        </svg>
        <InputFile OnChange="@OnChange" @ref="InputFile" multiple id="file" class="box__file" />
        <label for="file">
            @if (FileSources.Count > 0)
            {
                @: @FileSources.Count files selected
            }
            else
            {
                <strong>Choose a file</strong>
                <span class="box__dragndrop"> or drag it here</span>
            }

        </label>
        <button type="submit" class="box__button">Upload</button>
    </div>


    <div class="box__uploading">Uploading…</div>


    <div class="box__success">Done! <a href="#" class="box__restart" role="button">Upload more?</a></div>
    <div class="box__error">Error! <span></span>. <a href="#" class="box__restart" role="button">Try again!</a></div>
</div>


@if (UploadProgress > 0)
{
    <div class="progress mt-5" role="progressbar" aria-label="Example with label" aria-valuenow="@UploadProgress" aria-valuemin="0" aria-valuemax="100">
        <div class="progress-bar" style="width: @UploadProgress%">@UploadProgress%</div>
    </div>
}

@code {
    ElementReference FileDropContainer;
    InputFile InputFile;
    private List<string> FileSources = new List<string>();
    private const int maxAllowedFiles = 10;
    private string ErrorMessage = string.Empty;
    private string HoverClass = string.Empty;
    private bool Uploading = true;
    private int UploadProgress;
    private long TotalSize;
    private CancellationToken CancellationToken;

    Task OnAlertClose(MouseEventArgs e)
    {
        ErrorMessage = string.Empty;
        return Task.CompletedTask;
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        FileSources.Clear();
        UploadProgress = 0;
        ErrorMessage = string.Empty;
        if (e.FileCount > maxAllowedFiles)
        {
            ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
            return;
        }

        TotalSize = e.GetMultipleFiles(e.FileCount).Sum(x => x.Size);

        long totalRead = 0;
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            totalRead += file.Size;
            FileSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");

            UploadProgress = (int)((totalRead * 100) / TotalSize);
            await Task.Delay(1000);
        }
    }

    void OnDragEnter(DragEventArgs e) => HoverClass = "is-dragover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;
    private Task OnFileDrop(DragEventArgs e)
    {
        HoverClass = string.Empty;
        return Task.CompletedTask;
    }
}